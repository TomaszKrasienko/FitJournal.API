// <auto-generated />
using System;
using FitJournal.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FitJournal.Infrastructure.Migrations
{
    [DbContext(typeof(FitJournalDbContext))]
    [Migration("20221125152018_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FitJournal.Domain.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<bool>("WithWeight")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("FitJournal.Domain.Models.ExerciseTrainingUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("TrainingUnitId")
                        .HasColumnType("int");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("TrainingUnitId");

                    b.ToTable("ExercisesTrainingUnits");
                });

            modelBuilder.Entity("FitJournal.Domain.Models.ExerciseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExercisesTypes");
                });

            modelBuilder.Entity("FitJournal.Domain.Models.ExercisesTypeExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("ExerciseTypeId");

                    b.ToTable("ExercisesTypeExercises");
                });

            modelBuilder.Entity("FitJournal.Domain.Models.TrainingUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TrainingsUnits");
                });

            modelBuilder.Entity("FitJournal.Domain.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shortcut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("FitJournal.Domain.Models.Exercise", b =>
                {
                    b.HasOne("FitJournal.Domain.Models.Unit", "Unit")
                        .WithMany("ExercisesList")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("FitJournal.Domain.Models.ExerciseTrainingUnit", b =>
                {
                    b.HasOne("FitJournal.Domain.Models.Exercise", "Exercise")
                        .WithMany("ExerciseTrainingUnitsList")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitJournal.Domain.Models.TrainingUnit", "TrainingUnit")
                        .WithMany("ExerciseTrainingUnitsList")
                        .HasForeignKey("TrainingUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("TrainingUnit");
                });

            modelBuilder.Entity("FitJournal.Domain.Models.ExercisesTypeExercise", b =>
                {
                    b.HasOne("FitJournal.Domain.Models.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitJournal.Domain.Models.ExerciseType", "ExerciseType")
                        .WithMany("ExercisesList")
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("ExerciseType");
                });

            modelBuilder.Entity("FitJournal.Domain.Models.Exercise", b =>
                {
                    b.Navigation("ExerciseTrainingUnitsList");
                });

            modelBuilder.Entity("FitJournal.Domain.Models.ExerciseType", b =>
                {
                    b.Navigation("ExercisesList");
                });

            modelBuilder.Entity("FitJournal.Domain.Models.TrainingUnit", b =>
                {
                    b.Navigation("ExerciseTrainingUnitsList");
                });

            modelBuilder.Entity("FitJournal.Domain.Models.Unit", b =>
                {
                    b.Navigation("ExercisesList");
                });
#pragma warning restore 612, 618
        }
    }
}
